<root>
    <item
        name='kotlin.text.MatchGroup kotlin.text.MatchGroup copy(java.lang.String, kotlin.ranges.IntRange) 1'>
        <annotation name='org.jetbrains.annotations.NotNull' />
    </item>
    <item name='kotlin.text.MatchGroup kotlin.ranges.IntRange getRange()'>
        <annotation name='org.jetbrains.annotations.NotNull' />
    </item>
    <item name='kotlin.text.Regex.Companion java.lang.String escape(java.lang.String)'>
        <annotation name='org.jetbrains.annotations.NotNull' />
    </item>
    <item
        name='kotlin.text.Regex kotlin.text.MatchResult find$default(kotlin.text.Regex, java.lang.CharSequence, int, int, java.lang.Object) 0'>
        <annotation name='org.jetbrains.annotations.NotNull' />
    </item>
    <item name='kotlin.text.CharDirectionality EUROPEAN_NUMBER_TERMINATOR'>
        <annotation name='org.jetbrains.annotations.NotNull' />
    </item>
    <item
        name='kotlin.text.Regex java.lang.String replace(java.lang.CharSequence, kotlin.jvm.functions.Function1&lt;? super kotlin.text.MatchResult,? extends java.lang.CharSequence&gt;) 1'>
        <annotation name='org.jetbrains.annotations.NotNull' />
    </item>
    <item
        name='kotlin.text.Regex java.util.List split$default(kotlin.text.Regex, java.lang.CharSequence, int, int, java.lang.Object) 0'>
        <annotation name='org.jetbrains.annotations.NotNull' />
    </item>
    <item name='kotlin.text.CharCategory PRIVATE_USE'>
        <annotation name='org.jetbrains.annotations.NotNull' />
    </item>
    <item name='kotlin.text.CharCategory START_PUNCTUATION'>
        <annotation name='org.jetbrains.annotations.NotNull' />
    </item>
    <item
        name='kotlin.text.RegexKt kotlin.ranges.IntRange access$range(java.util.regex.MatchResult, int) 0'>
        <annotation name='org.jetbrains.annotations.NotNull' />
    </item>
    <item
        name='kotlin.text.RegexKt.fromInt..inlined.apply.lambda.1 java.lang.Object invoke(java.lang.Object) 0'>
        <annotation name='org.jetbrains.annotations.NotNull' />
    </item>
    <item
        name='kotlin.text.MatchResult.DefaultImpls kotlin.text.MatchResult.Destructured getDestructured(kotlin.text.MatchResult)'>
        <annotation name='org.jetbrains.annotations.NotNull' />
    </item>
    <item
        name='kotlin.text.Regex kotlin.sequences.Sequence&lt;kotlin.text.MatchResult&gt; findAll(java.lang.CharSequence, int) 0'>
        <annotation name='org.jetbrains.annotations.NotNull' />
    </item>
    <item
        name='kotlin.text.Regex java.lang.String replace(java.lang.CharSequence, java.lang.String)'>
        <annotation name='org.jetbrains.annotations.NotNull' />
    </item>
    <item name='kotlin.text.RegexKt.fromInt..inlined.apply.lambda.1 boolean invoke(T) 0'>
        <annotation name='org.jetbrains.annotations.NotNull' />
    </item>
    <item name='kotlin.text.MatcherMatchResult.groupValues.1 java.lang.String get(int)'>
        <annotation name='org.jetbrains.annotations.NotNull' />
    </item>
    <item name='kotlin.text.Typography INSTANCE'>
        <annotation name='org.jetbrains.annotations.NotNull' />
    </item>
    <item name='kotlin.text.CharCategory Companion'>
        <annotation name='org.jetbrains.annotations.NotNull' />
    </item>
    <item name='kotlin.text.Regex.Companion kotlin.text.Regex fromLiteral(java.lang.String) 0'>
        <annotation name='org.jetbrains.annotations.NotNull' />
    </item>
    <item
        name='kotlin.text.StringsKt___StringsKt.asIterable..inlined.Iterable.1 java.util.Iterator&lt;java.lang.Character&gt; iterator()'>
        <annotation name='org.jetbrains.annotations.NotNull' />
    </item>
    <item name='kotlin.text.DelimitedRangesSequence.iterator.1 kotlin.ranges.IntRange next()'>
        <annotation name='org.jetbrains.annotations.NotNull' />
    </item>
    <item name='kotlin.text.RegexOption CANON_EQ'>
        <annotation name='org.jetbrains.annotations.NotNull' />
    </item>
    <item
        name='kotlin.text.MatchResult.Destructured java.util.List&lt;java.lang.String&gt; toList()'>
        <annotation name='org.jetbrains.annotations.NotNull' />
    </item>
    <item
        name='kotlin.text.MatchGroup kotlin.text.MatchGroup copy(java.lang.String, kotlin.ranges.IntRange) 0'>
        <annotation name='org.jetbrains.annotations.NotNull' />
    </item>
    <item name='kotlin.text.CharDirectionality kotlin.Lazy access$getDirectionalityMap$cp()'>
        <annotation name='org.jetbrains.annotations.NotNull' />
    </item>
    <item name='kotlin.text.Charsets UTF_8'>
        <annotation name='org.jetbrains.annotations.NotNull' />
    </item>
    <item name='kotlin.text.Regex java.util.regex.Pattern toPattern()'>
        <annotation name='org.jetbrains.annotations.NotNull' />
    </item>
    <item name='kotlin.text.Regex java.util.Set&lt;kotlin.text.RegexOption&gt; getOptions()'>
        <annotation name='org.jetbrains.annotations.NotNull' />
    </item>
    <item
        name='kotlin.text.RegexKt kotlin.text.MatchResult access$findNext(java.util.regex.Matcher, int, java.lang.CharSequence) 2'>
        <annotation name='org.jetbrains.annotations.NotNull' />
    </item>
    <item name='kotlin.text.CharCategory UPPERCASE_LETTER'>
        <annotation name='org.jetbrains.annotations.NotNull' />
    </item>
    <item
        name='kotlin.text.Regex java.lang.String replace(java.lang.CharSequence, kotlin.jvm.functions.Function1&lt;? super kotlin.text.MatchResult,? extends java.lang.CharSequence&gt;) 0'>
        <annotation name='org.jetbrains.annotations.NotNull' />
    </item>
    <item
        name='kotlin.text.StringsKt___StringsKt.groupingBy.1 java.lang.Object keyOf(java.lang.Object) 0'>
        <annotation name='org.jetbrains.annotations.NotNull' />
    </item>
    <item name='kotlin.text.CharCategory MODIFIER_LETTER'>
        <annotation name='org.jetbrains.annotations.NotNull' />
    </item>
    <item name='kotlin.text.CharDirectionality RIGHT_TO_LEFT_OVERRIDE'>
        <annotation name='org.jetbrains.annotations.NotNull' />
    </item>
    <item name='kotlin.text.MatchGroup MatchGroup(java.lang.String, kotlin.ranges.IntRange) 0'>
        <annotation name='org.jetbrains.annotations.NotNull' />
    </item>
    <item name='kotlin.text.CharCategory LETTER_NUMBER'>
        <annotation name='org.jetbrains.annotations.NotNull' />
    </item>
    <item name='kotlin.text.MatchGroup kotlin.ranges.IntRange component2()'>
        <annotation name='org.jetbrains.annotations.NotNull' />
    </item>
    <item name='kotlin.text.Charsets ISO_8859_1'>
        <annotation name='org.jetbrains.annotations.NotNull' />
    </item>
    <item name='kotlin.text.CharDirectionality EUROPEAN_NUMBER'>
        <annotation name='org.jetbrains.annotations.NotNull' />
    </item>
    <item name='kotlin.text.RegexOption LITERAL'>
        <annotation name='org.jetbrains.annotations.NotNull' />
    </item>
    <item name='kotlin.text.MatchResult.Destructured Destructured(kotlin.text.MatchResult) 0'>
        <annotation name='org.jetbrains.annotations.NotNull' />
    </item>
    <item name='kotlin.text.MatchResult kotlin.text.MatchGroupCollection getGroups()'>
        <annotation name='org.jetbrains.annotations.NotNull' />
    </item>
    <item name='kotlin.text.CharCategory.Companion kotlin.text.CharCategory valueOf(int)'>
        <annotation name='org.jetbrains.annotations.NotNull' />
    </item>
    <item
        name='kotlin.text.Regex Regex(java.lang.String, java.util.Set&lt;? extends kotlin.text.RegexOption&gt;) 0'>
        <annotation name='org.jetbrains.annotations.NotNull' />
    </item>
    <item
        name='kotlin.text.CharDirectionality.Companion kotlin.text.CharDirectionality valueOf(int)'>
        <annotation name='org.jetbrains.annotations.NotNull' />
    </item>
    <item name='kotlin.text.Regex kotlin.text.MatchResult find(java.lang.CharSequence, int) 0'>
        <annotation name='org.jetbrains.annotations.NotNull' />
    </item>
    <item name='kotlin.text.CharCategory CharCategory(int, java.lang.String) 3'>
        <annotation name='org.jetbrains.annotations.NotNull' />
    </item>
    <item name='kotlin.text.CharCategory COMBINING_SPACING_MARK'>
        <annotation name='org.jetbrains.annotations.NotNull' />
    </item>
    <item name='kotlin.text.CharCategory DASH_PUNCTUATION'>
        <annotation name='org.jetbrains.annotations.NotNull' />
    </item>
    <item name='kotlin.text.Regex java.lang.String getPattern()'>
        <annotation name='org.jetbrains.annotations.NotNull' />
    </item>
    <item
        name='kotlin.text.MatchGroup kotlin.text.MatchGroup copy$default(kotlin.text.MatchGroup, java.lang.String, kotlin.ranges.IntRange, int, java.lang.Object) 2'>
        <annotation name='org.jetbrains.annotations.NotNull' />
    </item>
    <item
        name='kotlin.text.RegexKt kotlin.text.MatchResult access$findNext(java.util.regex.Matcher, int, java.lang.CharSequence) 0'>
        <annotation name='org.jetbrains.annotations.NotNull' />
    </item>
    <item name='kotlin.text.Charsets java.nio.charset.Charset UTF32_LE()'>
        <annotation name='org.jetbrains.annotations.NotNull' />
    </item>
    <item
        name='kotlin.text.MatchNamedGroupCollection kotlin.text.MatchGroup get(java.lang.String) 0'>
        <annotation name='org.jetbrains.annotations.NotNull' />
    </item>
    <item
        name='kotlin.text.StringsKt___StringsKt.asSequence..inlined.Sequence.1 java.util.Iterator&lt;java.lang.Character&gt; iterator()'>
        <annotation name='org.jetbrains.annotations.NotNull' />
    </item>
    <item name='kotlin.text.Regex.Companion java.lang.String escape(java.lang.String) 0'>
        <annotation name='org.jetbrains.annotations.NotNull' />
    </item>
    <item name='kotlin.text.Regex.Companion kotlin.text.Regex fromLiteral(java.lang.String)'>
        <annotation name='org.jetbrains.annotations.NotNull' />
    </item>
    <item name='kotlin.text.CharCategory PARAGRAPH_SEPARATOR'>
        <annotation name='org.jetbrains.annotations.NotNull' />
    </item>
    <item name='kotlin.text.Charsets UTF_16'>
        <annotation name='org.jetbrains.annotations.NotNull' />
    </item>
    <item name='kotlin.text.Charsets UTF_16BE'>
        <annotation name='org.jetbrains.annotations.NotNull' />
    </item>
    <item
        name='kotlin.text.Regex java.util.List&lt;java.lang.String&gt; split(java.lang.CharSequence, int)'>
        <annotation name='org.jetbrains.annotations.NotNull' />
    </item>
    <item name='kotlin.text.MatchGroup java.lang.String getValue()'>
        <annotation name='org.jetbrains.annotations.NotNull' />
    </item>
    <item name='kotlin.text.CharCategory MODIFIER_SYMBOL'>
        <annotation name='org.jetbrains.annotations.NotNull' />
    </item>
    <item name='kotlin.text.CharDirectionality OTHER_NEUTRALS'>
        <annotation name='org.jetbrains.annotations.NotNull' />
    </item>
    <item name='kotlin.text.CharCategory FINAL_QUOTE_PUNCTUATION'>
        <annotation name='org.jetbrains.annotations.NotNull' />
    </item>
    <item name='kotlin.text.CharCategory LINE_SEPARATOR'>
        <annotation name='org.jetbrains.annotations.NotNull' />
    </item>
    <item
        name='kotlin.text.MatchGroup kotlin.text.MatchGroup copy$default(kotlin.text.MatchGroup, java.lang.String, kotlin.ranges.IntRange, int, java.lang.Object)'>
        <annotation name='org.jetbrains.annotations.NotNull' />
    </item>
    <item
        name='kotlin.text.MatchGroup kotlin.text.MatchGroup copy$default(kotlin.text.MatchGroup, java.lang.String, kotlin.ranges.IntRange, int, java.lang.Object) 1'>
        <annotation name='org.jetbrains.annotations.NotNull' />
    </item>
    <item
        name='kotlin.text.Regex java.util.List split$default(kotlin.text.Regex, java.lang.CharSequence, int, int, java.lang.Object)'>
        <annotation name='org.jetbrains.annotations.NotNull' />
    </item>
    <item name='kotlin.text.MatchGroup java.lang.String component1()'>
        <annotation name='org.jetbrains.annotations.NotNull' />
    </item>
    <item
        name='kotlin.text.RegexKt kotlin.ranges.IntRange access$range(java.util.regex.MatchResult, int)'>
        <annotation name='org.jetbrains.annotations.NotNull' />
    </item>
    <item
        name='kotlin.text.MatcherMatchResult.groups.1 java.util.Iterator&lt;kotlin.text.MatchGroup&gt; iterator()'>
        <annotation name='org.jetbrains.annotations.NotNull' />
    </item>
    <item
        name='kotlin.text.Regex java.util.List split$default(kotlin.text.Regex, java.lang.CharSequence, int, int, java.lang.Object) 1'>
        <annotation name='org.jetbrains.annotations.NotNull' />
    </item>
    <item name='kotlin.text.RegexOption IGNORE_CASE'>
        <annotation name='org.jetbrains.annotations.NotNull' />
    </item>
    <item name='kotlin.text.Regex Regex(java.lang.String, kotlin.text.RegexOption) 1'>
        <annotation name='org.jetbrains.annotations.NotNull' />
    </item>
    <item
        name='kotlin.text.RegexKt kotlin.text.MatchResult access$matchEntire(java.util.regex.Matcher, java.lang.CharSequence) 1'>
        <annotation name='org.jetbrains.annotations.NotNull' />
    </item>
    <item name='kotlin.text.CharDirectionality RIGHT_TO_LEFT_EMBEDDING'>
        <annotation name='org.jetbrains.annotations.NotNull' />
    </item>
    <item
        name='kotlin.text.Regex kotlin.text.MatchResult find$default(kotlin.text.Regex, java.lang.CharSequence, int, int, java.lang.Object) 1'>
        <annotation name='org.jetbrains.annotations.NotNull' />
    </item>
    <item name='kotlin.text.CharCategory SPACE_SEPARATOR'>
        <annotation name='org.jetbrains.annotations.NotNull' />
    </item>
    <item name='kotlin.text.Charsets US_ASCII'>
        <annotation name='org.jetbrains.annotations.NotNull' />
    </item>
    <item name='kotlin.text.CharDirectionality UNDEFINED'>
        <annotation name='org.jetbrains.annotations.NotNull' />
    </item>
    <item
        name='kotlin.text.Regex.fromInt..inlined.apply.lambda.1 java.lang.Object invoke(java.lang.Object) 0'>
        <annotation name='org.jetbrains.annotations.NotNull' />
    </item>
    <item name='kotlin.text.CharDirectionality LEFT_TO_RIGHT'>
        <annotation name='org.jetbrains.annotations.NotNull' />
    </item>
    <item name='kotlin.text.Regex.fromInt..inlined.apply.lambda.1 boolean invoke(T) 0'>
        <annotation name='org.jetbrains.annotations.NotNull' />
    </item>
    <item
        name='kotlin.text.RegexKt kotlin.ranges.IntRange access$range(java.util.regex.MatchResult)'>
        <annotation name='org.jetbrains.annotations.NotNull' />
    </item>
    <item name='kotlin.text.MatchResult.Destructured kotlin.text.MatchResult getMatch()'>
        <annotation name='org.jetbrains.annotations.NotNull' />
    </item>
    <item name='kotlin.text.CharDirectionality COMMON_NUMBER_SEPARATOR'>
        <annotation name='org.jetbrains.annotations.NotNull' />
    </item>
    <item
        name='kotlin.text.MatchGroup kotlin.text.MatchGroup copy$default(kotlin.text.MatchGroup, java.lang.String, kotlin.ranges.IntRange, int, java.lang.Object) 0'>
        <annotation name='org.jetbrains.annotations.NotNull' />
    </item>
    <item name='kotlin.text.CharDirectionality WHITESPACE'>
        <annotation name='org.jetbrains.annotations.NotNull' />
    </item>
    <item name='kotlin.text.CharDirectionality PARAGRAPH_SEPARATOR'>
        <annotation name='org.jetbrains.annotations.NotNull' />
    </item>
    <item name='kotlin.text.CharDirectionality LEFT_TO_RIGHT_EMBEDDING'>
        <annotation name='org.jetbrains.annotations.NotNull' />
    </item>
    <item name='kotlin.text.Regex Regex(java.lang.String, kotlin.text.RegexOption) 0'>
        <annotation name='org.jetbrains.annotations.NotNull' />
    </item>
    <item name='kotlin.text.Regex Companion'>
        <annotation name='org.jetbrains.annotations.NotNull' />
    </item>
    <item name='kotlin.text.CharCategory LOWERCASE_LETTER'>
        <annotation name='org.jetbrains.annotations.NotNull' />
    </item>
    <item
        name='kotlin.text.RegexKt kotlin.text.MatchResult access$matchEntire(java.util.regex.Matcher, java.lang.CharSequence) 0'>
        <annotation name='org.jetbrains.annotations.NotNull' />
    </item>
    <item
        name='kotlin.text.MatchGroup kotlin.text.MatchGroup copy(java.lang.String, kotlin.ranges.IntRange)'>
        <annotation name='org.jetbrains.annotations.NotNull' />
    </item>
    <item
        name='kotlin.text.Regex java.util.List&lt;java.lang.String&gt; split(java.lang.CharSequence, int) 0'>
        <annotation name='org.jetbrains.annotations.NotNull' />
    </item>
    <item name='kotlin.text.MatchResult kotlin.ranges.IntRange getRange()'>
        <annotation name='org.jetbrains.annotations.NotNull' />
    </item>
    <item
        name='kotlin.text.Regex Regex(java.lang.String, java.util.Set&lt;? extends kotlin.text.RegexOption&gt;) 1'>
        <annotation name='org.jetbrains.annotations.NotNull' />
    </item>
    <item name='kotlin.text.CharCategory DECIMAL_DIGIT_NUMBER'>
        <annotation name='org.jetbrains.annotations.NotNull' />
    </item>
    <item name='kotlin.text.CharDirectionality Companion'>
        <annotation name='org.jetbrains.annotations.NotNull' />
    </item>
    <item name='kotlin.text.Charsets UTF_16LE'>
        <annotation name='org.jetbrains.annotations.NotNull' />
    </item>
    <item name='kotlin.text.Regex Regex(java.lang.String) 0'>
        <annotation name='org.jetbrains.annotations.NotNull' />
    </item>
    <item name='kotlin.text.CharCategory MATH_SYMBOL'>
        <annotation name='org.jetbrains.annotations.NotNull' />
    </item>
    <item name='kotlin.text.Regex boolean containsMatchIn(java.lang.CharSequence) 0'>
        <annotation name='org.jetbrains.annotations.NotNull' />
    </item>
    <item name='kotlin.text.Regex java.lang.String toString()'>
        <annotation name='org.jetbrains.annotations.NotNull' />
    </item>
    <item
        name='kotlin.text.MatcherMatchResult.groups.1 kotlin.text.MatchGroup get(java.lang.String) 0'>
        <annotation name='org.jetbrains.annotations.NotNull' />
    </item>
    <item name='kotlin.text.CharCategory kotlin.Lazy access$getCategoryMap$cp()'>
        <annotation name='org.jetbrains.annotations.NotNull' />
    </item>
    <item name='kotlin.text.CharCategory TITLECASE_LETTER'>
        <annotation name='org.jetbrains.annotations.NotNull' />
    </item>
    <item name='kotlin.text.Regex kotlin.text.MatchResult matchEntire(java.lang.CharSequence) 0'>
        <annotation name='org.jetbrains.annotations.NotNull' />
    </item>
    <item name='kotlin.text.CharDirectionality RIGHT_TO_LEFT'>
        <annotation name='org.jetbrains.annotations.NotNull' />
    </item>
    <item name='kotlin.text.DelimitedRangesSequence.iterator.1 java.lang.Object next()'>
        <annotation name='org.jetbrains.annotations.NotNull' />
    </item>
    <item
        name='kotlin.text.Regex java.lang.String replace(java.lang.CharSequence, java.lang.String) 1'>
        <annotation name='org.jetbrains.annotations.NotNull' />
    </item>
    <item name='kotlin.text.CharCategory CONNECTOR_PUNCTUATION'>
        <annotation name='org.jetbrains.annotations.NotNull' />
    </item>
    <item name='kotlin.text.CharCategory SURROGATE'>
        <annotation name='org.jetbrains.annotations.NotNull' />
    </item>
    <item
        name='kotlin.text.Regex java.lang.String replace(java.lang.CharSequence, kotlin.jvm.functions.Function1&lt;? super kotlin.text.MatchResult,? extends java.lang.CharSequence&gt;)'>
        <annotation name='org.jetbrains.annotations.NotNull' />
    </item>
    <item name='kotlin.text.RegexOption UNIX_LINES'>
        <annotation name='org.jetbrains.annotations.NotNull' />
    </item>
    <item
        name='kotlin.text.Regex.Companion int access$ensureUnicodeCase(kotlin.text.Regex.Companion, int) 0'>
        <annotation name='org.jetbrains.annotations.NotNull' />
    </item>
    <item name='kotlin.text.CharCategory ENCLOSING_MARK'>
        <annotation name='org.jetbrains.annotations.NotNull' />
    </item>
    <item name='kotlin.text.CharCategory OTHER_LETTER'>
        <annotation name='org.jetbrains.annotations.NotNull' />
    </item>
    <item name='kotlin.text.CharDirectionality BOUNDARY_NEUTRAL'>
        <annotation name='org.jetbrains.annotations.NotNull' />
    </item>
    <item name='kotlin.text.CharCategory CONTROL'>
        <annotation name='org.jetbrains.annotations.NotNull' />
    </item>
    <item name='kotlin.text.CharDirectionality EUROPEAN_NUMBER_SEPARATOR'>
        <annotation name='org.jetbrains.annotations.NotNull' />
    </item>
    <item name='kotlin.text.CharCategory END_PUNCTUATION'>
        <annotation name='org.jetbrains.annotations.NotNull' />
    </item>
    <item name='kotlin.text.Regex Regex(java.util.regex.Pattern) 0'>
        <annotation name='org.jetbrains.annotations.NotNull' />
    </item>
    <item
        name='kotlin.text.Regex java.lang.String replaceFirst(java.lang.CharSequence, java.lang.String) 1'>
        <annotation name='org.jetbrains.annotations.NotNull' />
    </item>
    <item name='kotlin.text.RegexOption MULTILINE'>
        <annotation name='org.jetbrains.annotations.NotNull' />
    </item>
    <item name='kotlin.text.CharDirectionality LEFT_TO_RIGHT_OVERRIDE'>
        <annotation name='org.jetbrains.annotations.NotNull' />
    </item>
    <item name='kotlin.text.CharCategory UNASSIGNED'>
        <annotation name='org.jetbrains.annotations.NotNull' />
    </item>
    <item
        name='kotlin.text.StringsKt___StringsKt.groupingBy.1 java.util.Iterator&lt;java.lang.Character&gt; sourceIterator()'>
        <annotation name='org.jetbrains.annotations.NotNull' />
    </item>
    <item name='kotlin.text.RegexOption COMMENTS'>
        <annotation name='org.jetbrains.annotations.NotNull' />
    </item>
    <item
        name='kotlin.text.RegexKt kotlin.ranges.IntRange access$range(java.util.regex.MatchResult) 0'>
        <annotation name='org.jetbrains.annotations.NotNull' />
    </item>
    <item name='kotlin.text.CharCategory INITIAL_QUOTE_PUNCTUATION'>
        <annotation name='org.jetbrains.annotations.NotNull' />
    </item>
    <item name='kotlin.text.MatchGroup MatchGroup(java.lang.String, kotlin.ranges.IntRange) 1'>
        <annotation name='org.jetbrains.annotations.NotNull' />
    </item>
    <item
        name='kotlin.text.Regex kotlin.sequences.Sequence&lt;kotlin.text.MatchResult&gt; findAll(java.lang.CharSequence, int)'>
        <annotation name='org.jetbrains.annotations.NotNull' />
    </item>
    <item name='kotlin.text.CharDirectionality SEGMENT_SEPARATOR'>
        <annotation name='org.jetbrains.annotations.NotNull' />
    </item>
    <item
        name='kotlin.text.Regex kotlin.sequences.Sequence findAll$default(kotlin.text.Regex, java.lang.CharSequence, int, int, java.lang.Object) 0'>
        <annotation name='org.jetbrains.annotations.NotNull' />
    </item>
    <item name='kotlin.text.MatchResult java.lang.String getValue()'>
        <annotation name='org.jetbrains.annotations.NotNull' />
    </item>
    <item name='kotlin.text.Charsets java.nio.charset.Charset UTF32_BE()'>
        <annotation name='org.jetbrains.annotations.NotNull' />
    </item>
    <item name='kotlin.text.CharCategory OTHER_NUMBER'>
        <annotation name='org.jetbrains.annotations.NotNull' />
    </item>
    <item
        name='kotlin.text.Regex java.lang.String replace(java.lang.CharSequence, java.lang.String) 0'>
        <annotation name='org.jetbrains.annotations.NotNull' />
    </item>
    <item name='kotlin.text.CharCategory java.lang.String getCode()'>
        <annotation name='org.jetbrains.annotations.NotNull' />
    </item>
    <item name='kotlin.text.RegexKt int access$toInt(java.lang.Iterable) 0'>
        <annotation name='org.jetbrains.annotations.NotNull' />
    </item>
    <item name='kotlin.text.MatchResult kotlin.text.MatchResult.Destructured getDestructured()'>
        <annotation name='org.jetbrains.annotations.NotNull' />
    </item>
    <item
        name='kotlin.text.Regex java.lang.String replaceFirst(java.lang.CharSequence, java.lang.String)'>
        <annotation name='org.jetbrains.annotations.NotNull' />
    </item>
    <item name='kotlin.text.CharDirectionality RIGHT_TO_LEFT_ARABIC'>
        <annotation name='org.jetbrains.annotations.NotNull' />
    </item>
    <item
        name='kotlin.text.MatchResult.DefaultImpls kotlin.text.MatchResult.Destructured getDestructured(kotlin.text.MatchResult) 0'>
        <annotation name='org.jetbrains.annotations.NotNull' />
    </item>
    <item name='kotlin.text.MatcherMatchResult.groupValues.1 java.lang.Object get(int)'>
        <annotation name='org.jetbrains.annotations.NotNull' />
    </item>
    <item name='kotlin.text.CharDirectionality POP_DIRECTIONAL_FORMAT'>
        <annotation name='org.jetbrains.annotations.NotNull' />
    </item>
    <item name='kotlin.text.Charsets INSTANCE'>
        <annotation name='org.jetbrains.annotations.NotNull' />
    </item>
    <item
        name='kotlin.text.Regex java.lang.String replaceFirst(java.lang.CharSequence, java.lang.String) 0'>
        <annotation name='org.jetbrains.annotations.NotNull' />
    </item>
    <item name='kotlin.text.CharDirectionality NONSPACING_MARK'>
        <annotation name='org.jetbrains.annotations.NotNull' />
    </item>
    <item name='kotlin.text.Charsets java.nio.charset.Charset UTF32()'>
        <annotation name='org.jetbrains.annotations.NotNull' />
    </item>
    <item name='kotlin.text.Regex.Companion java.lang.String escapeReplacement(java.lang.String)'>
        <annotation name='org.jetbrains.annotations.NotNull' />
    </item>
    <item name='kotlin.text.CharCategory FORMAT'>
        <annotation name='org.jetbrains.annotations.NotNull' />
    </item>
    <item
        name='kotlin.text.Regex kotlin.sequences.Sequence findAll$default(kotlin.text.Regex, java.lang.CharSequence, int, int, java.lang.Object)'>
        <annotation name='org.jetbrains.annotations.NotNull' />
    </item>
    <item name='kotlin.text.Regex.Companion java.lang.String escapeReplacement(java.lang.String) 0'>
        <annotation name='org.jetbrains.annotations.NotNull' />
    </item>
    <item name='kotlin.text.CharCategory CURRENCY_SYMBOL'>
        <annotation name='org.jetbrains.annotations.NotNull' />
    </item>
    <item
        name='kotlin.text.Regex kotlin.sequences.Sequence findAll$default(kotlin.text.Regex, java.lang.CharSequence, int, int, java.lang.Object) 1'>
        <annotation name='org.jetbrains.annotations.NotNull' />
    </item>
    <item name='kotlin.text.CharCategory NON_SPACING_MARK'>
        <annotation name='org.jetbrains.annotations.NotNull' />
    </item>
    <item name='kotlin.text.CharDirectionality ARABIC_NUMBER'>
        <annotation name='org.jetbrains.annotations.NotNull' />
    </item>
    <item name='kotlin.text.Regex boolean matches(java.lang.CharSequence) 0'>
        <annotation name='org.jetbrains.annotations.NotNull' />
    </item>
    <item name='kotlin.text.CharCategory OTHER_SYMBOL'>
        <annotation name='org.jetbrains.annotations.NotNull' />
    </item>
    <item name='kotlin.text.CharCategory OTHER_PUNCTUATION'>
        <annotation name='org.jetbrains.annotations.NotNull' />
    </item>
    <item name='kotlin.text.RegexOption DOT_MATCHES_ALL'>
        <annotation name='org.jetbrains.annotations.NotNull' />
    </item>
</root>
