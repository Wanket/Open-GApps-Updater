<root>
    <item
        name='org.hamcrest.Matchers org.hamcrest.Matcher&lt;E[]&gt; arrayContaining(java.util.List&lt;org.hamcrest.Matcher&lt;? super E&gt;&gt;)'>
        <annotation name='org.jetbrains.annotations.NotNull' />
    </item>
    <item
        name='org.hamcrest.Matchers org.hamcrest.Matcher&lt;java.lang.Iterable&lt;? extends T&gt;&gt; containsInAnyOrder(T...)'>
        <annotation name='org.jetbrains.annotations.NotNull' />
    </item>
    <item name='org.hamcrest.Matchers org.hamcrest.Matcher&lt;E[]&gt; arrayContaining(E...)'>
        <annotation name='org.jetbrains.annotations.NotNull' />
    </item>
    <item
        name='org.hamcrest.Matchers org.hamcrest.Matcher&lt;java.lang.Class&lt;?&gt;&gt; typeCompatibleWith(java.lang.Class&lt;T&gt;)'>
        <annotation name='org.jetbrains.annotations.NotNull' />
    </item>
    <item
        name='org.hamcrest.Matchers org.hamcrest.Matcher&lt;java.util.Map&lt;? extends K,? extends V&gt;&gt; hasEntry(K, V)'>
        <annotation name='org.jetbrains.annotations.NotNull' />
    </item>
    <item
        name='org.hamcrest.Matchers org.hamcrest.Matcher&lt;java.util.Map&lt;? extends K,?&gt;&gt; hasKey(org.hamcrest.Matcher&lt;? super K&gt;)'>
        <annotation name='org.jetbrains.annotations.NotNull' />
    </item>
    <item
        name='org.hamcrest.Matchers org.hamcrest.Matcher&lt;java.lang.Double&gt; closeTo(double, double)'>
        <annotation name='org.jetbrains.annotations.NotNull' />
    </item>
    <item name='org.hamcrest.Matchers org.hamcrest.Matcher&lt;java.lang.String&gt; isEmptyString()'>
        <annotation name='org.jetbrains.annotations.NotNull' />
    </item>
    <item
        name='org.hamcrest.Matchers org.hamcrest.Matcher&lt;java.lang.Iterable&lt;? extends E&gt;&gt; contains(java.util.List&lt;org.hamcrest.Matcher&lt;? super E&gt;&gt;)'>
        <annotation name='org.jetbrains.annotations.NotNull' />
    </item>
    <item
        name='org.hamcrest.Matchers org.hamcrest.Matcher&lt;java.util.EventObject&gt; eventFrom(java.lang.Object)'>
        <annotation name='org.jetbrains.annotations.NotNull' />
    </item>
    <item
        name='org.hamcrest.Matchers org.hamcrest.Matcher&lt;E[]&gt; arrayContainingInAnyOrder(org.hamcrest.Matcher&lt;? super E&gt;...)'>
        <annotation name='org.jetbrains.annotations.NotNull' />
    </item>
    <item name='org.hamcrest.Matchers org.hamcrest.Matcher&lt;T&gt; samePropertyValuesAs(T) 0'>
        <annotation name='org.jetbrains.annotations.NotNull' />
    </item>
    <item
        name='org.hamcrest.Matchers org.hamcrest.Matcher&lt;E[]&gt; arrayContainingInAnyOrder(E...)'>
        <annotation name='org.jetbrains.annotations.NotNull' />
    </item>
    <item
        name='org.hamcrest.Matchers org.hamcrest.Matcher&lt;java.util.Collection&lt;? extends E&gt;&gt; empty()'>
        <annotation name='org.jetbrains.annotations.NotNull' />
    </item>
    <item
        name='org.hamcrest.Matchers org.hamcrest.Matcher&lt;java.lang.String&gt; equalToIgnoringCase(java.lang.String)'>
        <annotation name='org.jetbrains.annotations.NotNull' />
    </item>
    <item
        name='org.hamcrest.Matchers org.hamcrest.Matcher&lt;java.lang.String&gt; equalToIgnoringWhiteSpace(java.lang.String)'>
        <annotation name='org.jetbrains.annotations.NotNull' />
    </item>
    <item name='org.hamcrest.Matchers org.hamcrest.Matcher&lt;T&gt; hasProperty(java.lang.String)'>
        <annotation name='org.jetbrains.annotations.NotNull' />
    </item>
    <item
        name='org.hamcrest.Matchers org.hamcrest.Matcher&lt;java.lang.Iterable&lt;? extends E&gt;&gt; containsInAnyOrder(org.hamcrest.Matcher&lt;? super E&gt;)'>
        <annotation name='org.jetbrains.annotations.NotNull' />
    </item>
    <item
        name='org.hamcrest.Matchers org.hamcrest.Matcher&lt;java.lang.String&gt; equalToIgnoringWhiteSpace(java.lang.String) 0'>
        <annotation name='org.jetbrains.annotations.NotNull' />
    </item>
    <item
        name='org.hamcrest.Matchers org.hamcrest.Matcher&lt;java.util.Collection&lt;? extends E&gt;&gt; hasSize(int)'>
        <annotation name='org.jetbrains.annotations.NotNull' />
    </item>
    <item
        name='org.hamcrest.Matchers org.hamcrest.Matcher&lt;java.lang.Iterable&lt;? extends E&gt;&gt; emptyIterable()'>
        <annotation name='org.jetbrains.annotations.NotNull' />
    </item>
    <item
        name='org.hamcrest.Matchers org.hamcrest.Matcher&lt;java.util.Map&lt;?,? extends V&gt;&gt; hasValue(V)'>
        <annotation name='org.jetbrains.annotations.NotNull' />
    </item>
    <item
        name='org.hamcrest.Matchers org.hamcrest.Matcher&lt;java.math.BigDecimal&gt; closeTo(java.math.BigDecimal, java.math.BigDecimal)'>
        <annotation name='org.jetbrains.annotations.NotNull' />
    </item>
    <item
        name='org.hamcrest.Matchers org.hamcrest.Matcher&lt;java.lang.String&gt; stringContainsInOrder(java.lang.Iterable&lt;java.lang.String&gt;)'>
        <annotation name='org.jetbrains.annotations.NotNull' />
    </item>
    <item name='org.hamcrest.Matchers org.hamcrest.Matcher&lt;T&gt; isIn(T[])'>
        <annotation name='org.jetbrains.annotations.NotNull' />
    </item>
    <item
        name='org.hamcrest.Matchers org.hamcrest.Matcher&lt;java.lang.Iterable&lt;? extends E&gt;&gt; contains(org.hamcrest.Matcher&lt;? super E&gt;...)'>
        <annotation name='org.jetbrains.annotations.NotNull' />
    </item>
    <item
        name='org.hamcrest.Matchers org.hamcrest.Matcher&lt;java.lang.Iterable&lt;E&gt;&gt; iterableWithSize(org.hamcrest.Matcher&lt;? super java.lang.Integer&gt;)'>
        <annotation name='org.jetbrains.annotations.NotNull' />
    </item>
    <item
        name='org.hamcrest.Matchers org.hamcrest.Matcher&lt;java.lang.Iterable&lt;? extends E&gt;&gt; contains(E...)'>
        <annotation name='org.jetbrains.annotations.NotNull' />
    </item>
    <item
        name='org.hamcrest.Matchers org.hamcrest.Matcher&lt;java.lang.Iterable&lt;? extends T&gt;&gt; containsInAnyOrder(java.util.Collection&lt;org.hamcrest.Matcher&lt;? super T&gt;&gt;)'>
        <annotation name='org.jetbrains.annotations.NotNull' />
    </item>
    <item name='org.hamcrest.Matchers org.hamcrest.Matcher&lt;E[]&gt; arrayContaining(E...) 0'>
        <annotation name='org.jetbrains.annotations.NotNull' />
    </item>
    <item
        name='org.hamcrest.Matchers org.hamcrest.collection.IsArray&lt;T&gt; array(org.hamcrest.Matcher&lt;? super T&gt;...) 0'>
        <annotation name='org.jetbrains.annotations.NotNull' />
    </item>
    <item name='org.hamcrest.Matchers org.hamcrest.Matcher&lt;T&gt; greaterThanOrEqualTo(T)'>
        <annotation name='org.jetbrains.annotations.NotNull' />
    </item>
    <item
        name='org.hamcrest.Matchers org.hamcrest.Matcher&lt;T[]&gt; hasItemInArray(org.hamcrest.Matcher&lt;? super T&gt;)'>
        <annotation name='org.jetbrains.annotations.NotNull' />
    </item>
    <item
        name='org.hamcrest.Matchers org.hamcrest.Matcher&lt;java.lang.Iterable&lt;? extends T&gt;&gt; containsInAnyOrder(org.hamcrest.Matcher&lt;? super T&gt;...)'>
        <annotation name='org.jetbrains.annotations.NotNull' />
    </item>
    <item
        name='org.hamcrest.Matchers org.hamcrest.Matcher&lt;java.util.Collection&lt;E&gt;&gt; emptyCollectionOf(java.lang.Class&lt;E&gt;)'>
        <annotation name='org.jetbrains.annotations.NotNull' />
    </item>
    <item name='org.hamcrest.Matchers org.hamcrest.Matcher&lt;T&gt; samePropertyValuesAs(T)'>
        <annotation name='org.jetbrains.annotations.NotNull' />
    </item>
    <item name='org.hamcrest.Matchers org.hamcrest.Matcher&lt;T[]&gt; hasItemInArray(T)'>
        <annotation name='org.jetbrains.annotations.NotNull' />
    </item>
    <item
        name='org.hamcrest.Matchers org.hamcrest.Matcher&lt;java.lang.Iterable&lt;E&gt;&gt; emptyIterableOf(java.lang.Class&lt;E&gt;)'>
        <annotation name='org.jetbrains.annotations.NotNull' />
    </item>
    <item
        name='org.hamcrest.Matchers org.hamcrest.Matcher&lt;java.lang.String&gt; equalToIgnoringCase(java.lang.String) 0'>
        <annotation name='org.jetbrains.annotations.NotNull' />
    </item>
    <item name='org.hamcrest.Matchers org.hamcrest.Matcher&lt;T&gt; comparesEqualTo(T)'>
        <annotation name='org.jetbrains.annotations.NotNull' />
    </item>
    <item
        name='org.hamcrest.Matchers org.hamcrest.Matcher&lt;java.lang.Iterable&lt;? extends E&gt;&gt; contains(org.hamcrest.Matcher&lt;? super E&gt;)'>
        <annotation name='org.jetbrains.annotations.NotNull' />
    </item>
    <item
        name='org.hamcrest.Matchers org.hamcrest.Matcher&lt;E[]&gt; arrayContainingInAnyOrder(E...) 0'>
        <annotation name='org.jetbrains.annotations.NotNull' />
    </item>
    <item name='org.hamcrest.Matchers org.hamcrest.Matcher&lt;T&gt; lessThan(T)'>
        <annotation name='org.jetbrains.annotations.NotNull' />
    </item>
    <item name='org.hamcrest.Matchers org.hamcrest.Matcher&lt;T&gt; hasToString(java.lang.String)'>
        <annotation name='org.jetbrains.annotations.NotNull' />
    </item>
    <item
        name='org.hamcrest.Matchers org.hamcrest.Matcher&lt;org.w3c.dom.Node&gt; hasXPath(java.lang.String, org.hamcrest.Matcher&lt;java.lang.String&gt;)'>
        <annotation name='org.jetbrains.annotations.NotNull' />
    </item>
    <item
        name='org.hamcrest.Matchers org.hamcrest.Matcher&lt;T&gt; isIn(java.util.Collection&lt;T&gt;)'>
        <annotation name='org.jetbrains.annotations.NotNull' />
    </item>
    <item
        name='org.hamcrest.Matchers org.hamcrest.Matcher&lt;java.util.Map&lt;? extends K,?&gt;&gt; hasKey(K)'>
        <annotation name='org.jetbrains.annotations.NotNull' />
    </item>
    <item name='org.hamcrest.Matchers org.hamcrest.Matcher&lt;T&gt; isOneOf(T...)'>
        <annotation name='org.jetbrains.annotations.NotNull' />
    </item>
    <item
        name='org.hamcrest.Matchers org.hamcrest.Matcher&lt;java.util.EventObject&gt; eventFrom(java.lang.Class&lt;? extends java.util.EventObject&gt;, java.lang.Object)'>
        <annotation name='org.jetbrains.annotations.NotNull' />
    </item>
    <item
        name='org.hamcrest.Matchers org.hamcrest.Matcher&lt;java.util.Map&lt;? extends K,? extends V&gt;&gt; hasEntry(org.hamcrest.Matcher&lt;? super K&gt;, org.hamcrest.Matcher&lt;? super V&gt;)'>
        <annotation name='org.jetbrains.annotations.NotNull' />
    </item>
    <item
        name='org.hamcrest.Matchers org.hamcrest.Matcher&lt;java.util.Map&lt;?,? extends V&gt;&gt; hasValue(org.hamcrest.Matcher&lt;? super V&gt;)'>
        <annotation name='org.jetbrains.annotations.NotNull' />
    </item>
    <item
        name='org.hamcrest.Matchers org.hamcrest.Matcher&lt;E[]&gt; arrayContainingInAnyOrder(java.util.Collection&lt;org.hamcrest.Matcher&lt;? super E&gt;&gt;)'>
        <annotation name='org.jetbrains.annotations.NotNull' />
    </item>
    <item
        name='org.hamcrest.Matchers org.hamcrest.Matcher&lt;E[]&gt; arrayWithSize(org.hamcrest.Matcher&lt;? super java.lang.Integer&gt;)'>
        <annotation name='org.jetbrains.annotations.NotNull' />
    </item>
    <item
        name='org.hamcrest.Matchers org.hamcrest.Matcher&lt;java.lang.Iterable&lt;? extends E&gt;&gt; contains(E...) 0'>
        <annotation name='org.jetbrains.annotations.NotNull' />
    </item>
    <item
        name='org.hamcrest.Matchers org.hamcrest.Matcher&lt;T&gt; hasToString(org.hamcrest.Matcher&lt;? super java.lang.String&gt;)'>
        <annotation name='org.jetbrains.annotations.NotNull' />
    </item>
    <item
        name='org.hamcrest.Matchers org.hamcrest.Matcher&lt;org.w3c.dom.Node&gt; hasXPath(java.lang.String, javax.xml.namespace.NamespaceContext, org.hamcrest.Matcher&lt;java.lang.String&gt;)'>
        <annotation name='org.jetbrains.annotations.NotNull' />
    </item>
    <item
        name='org.hamcrest.Matchers org.hamcrest.Matcher&lt;E[]&gt; arrayContaining(org.hamcrest.Matcher&lt;? super E&gt;...)'>
        <annotation name='org.jetbrains.annotations.NotNull' />
    </item>
    <item
        name='org.hamcrest.Matchers org.hamcrest.Matcher&lt;org.w3c.dom.Node&gt; hasXPath(java.lang.String)'>
        <annotation name='org.jetbrains.annotations.NotNull' />
    </item>
    <item
        name='org.hamcrest.Matchers org.hamcrest.Matcher&lt;java.lang.Iterable&lt;? extends T&gt;&gt; containsInAnyOrder(T...) 0'>
        <annotation name='org.jetbrains.annotations.NotNull' />
    </item>
    <item
        name='org.hamcrest.Matchers org.hamcrest.Matcher&lt;java.util.Collection&lt;? extends E&gt;&gt; hasSize(org.hamcrest.Matcher&lt;? super java.lang.Integer&gt;)'>
        <annotation name='org.jetbrains.annotations.NotNull' />
    </item>
    <item
        name='org.hamcrest.Matchers org.hamcrest.collection.IsArray&lt;T&gt; array(org.hamcrest.Matcher&lt;? super T&gt;...)'>
        <annotation name='org.jetbrains.annotations.NotNull' />
    </item>
    <item name='org.hamcrest.Matchers org.hamcrest.Matcher&lt;E[]&gt; arrayWithSize(int)'>
        <annotation name='org.jetbrains.annotations.NotNull' />
    </item>
    <item name='org.hamcrest.Matchers org.hamcrest.Matcher&lt;T&gt; greaterThan(T)'>
        <annotation name='org.jetbrains.annotations.NotNull' />
    </item>
    <item
        name='org.hamcrest.Matchers org.hamcrest.Matcher&lt;org.w3c.dom.Node&gt; hasXPath(java.lang.String, javax.xml.namespace.NamespaceContext)'>
        <annotation name='org.jetbrains.annotations.NotNull' />
    </item>
    <item
        name='org.hamcrest.Matchers org.hamcrest.Matcher&lt;java.lang.Iterable&lt;E&gt;&gt; iterableWithSize(int)'>
        <annotation name='org.jetbrains.annotations.NotNull' />
    </item>
    <item
        name='org.hamcrest.Matchers org.hamcrest.Matcher&lt;T&gt; hasProperty(java.lang.String, org.hamcrest.Matcher&lt;?&gt;)'>
        <annotation name='org.jetbrains.annotations.NotNull' />
    </item>
    <item name='org.hamcrest.Matchers org.hamcrest.Matcher&lt;T&gt; lessThanOrEqualTo(T)'>
        <annotation name='org.jetbrains.annotations.NotNull' />
    </item>
</root>
